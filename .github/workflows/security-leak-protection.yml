name: 🔒 Security Leak Protection (FREE)

# Protects beginners from accidentally committing secrets
# 100% FREE - No API keys needed!

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

jobs:
  # Detect secrets in code - FREE!
  secret-scanning:
    name: 🔐 Secret Detection (FREE)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan (FREE)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      - name: Gitleaks Secret Scan (FREE)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Check for exposed API keys and credentials
  api-key-detection:
    name: 🔑 API Key Detection (FREE)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for API keys and secrets
        run: |
          echo "🔍 Scanning for exposed secrets..."

          # Patterns to detect (FREE regex scanning)
          PATTERNS=(
            "ANTHROPIC_API_KEY.*sk-ant-[a-zA-Z0-9]+"
            "OPENAI_API_KEY.*sk-[a-zA-Z0-9]+"
            "GITHUB_TOKEN.*ghp_[a-zA-Z0-9]+"
            "VERCEL.*[a-zA-Z0-9]{24}"
            "NETLIFY.*[a-zA-Z0-9]{40}"
            "AWS_ACCESS_KEY.*AKIA[0-9A-Z]{16}"
            "AWS_SECRET.*[a-zA-Z0-9/+=]{40}"
            "-----BEGIN.*PRIVATE KEY-----"
            "password.*=.*['\"][^'\"]+['\"]"
            "api[_-]?key.*['\"][^'\"]{20,}['\"]"
            "secret.*['\"][^'\"]{20,}['\"]"
            "token.*['\"][^'\"]{20,}['\"]"
          )

          FOUND_SECRETS=0

          for pattern in "${PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" . \
              --exclude-dir=node_modules \
              --exclude-dir=.git \
              --exclude-dir=dist \
              --exclude-dir=build \
              --exclude="*.md" \
              --exclude="*.yml" \
              --exclude="*.yaml" 2>/dev/null; then

              echo "❌ FOUND POTENTIAL SECRET: $pattern"
              FOUND_SECRETS=1
            fi
          done

          if [ $FOUND_SECRETS -eq 1 ]; then
            echo ""
            echo "🚨 SECURITY ALERT: Potential secrets found in code!"
            echo "⚠️  NEVER commit API keys, tokens, or passwords to GitHub!"
            echo "📚 See SECURITY_FOR_BEGINNERS.md for help"
            exit 1
          else
            echo "✅ No secrets detected in code"
          fi

  # Check for sensitive files that shouldn't be committed
  sensitive-files-check:
    name: 📁 Sensitive Files Check (FREE)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for sensitive files
        run: |
          echo "🔍 Checking for sensitive files..."

          SENSITIVE_FILES=(
            ".env"
            ".env.local"
            ".env.production"
            ".env.development"
            "credentials.json"
            "secrets.json"
            "private.key"
            "*.pem"
            "*.p12"
            "*.pfx"
            "id_rsa"
            "id_dsa"
            ".aws/credentials"
            ".npmrc"
            ".pypirc"
          )

          FOUND_FILES=0

          for file in "${SENSITIVE_FILES[@]}"; do
            if find . -name "$file" \
              -not -path "*/node_modules/*" \
              -not -path "*/.git/*" \
              -not -path "*/dist/*" \
              -not -path "*/build/*" | grep -q .; then

              echo "❌ FOUND SENSITIVE FILE: $file"
              find . -name "$file" \
                -not -path "*/node_modules/*" \
                -not -path "*/.git/*"
              FOUND_FILES=1
            fi
          done

          if [ $FOUND_FILES -eq 1 ]; then
            echo ""
            echo "🚨 SECURITY ALERT: Sensitive files found!"
            echo "⚠️  These files should NEVER be committed to GitHub!"
            echo "✅ Add them to .gitignore instead"
            echo "📚 See SECURITY_FOR_BEGINNERS.md for help"
            exit 1
          else
            echo "✅ No sensitive files found"
          fi

  # Verify .gitignore is properly configured
  gitignore-check:
    name: 📝 .gitignore Verification (FREE)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify .gitignore
        run: |
          echo "🔍 Verifying .gitignore configuration..."

          REQUIRED_IGNORES=(
            "*.env"
            ".env*"
            "*.key"
            "*.pem"
            "credentials.json"
            "secrets.json"
            "node_modules"
          )

          MISSING=0

          if [ ! -f .gitignore ]; then
            echo "❌ .gitignore file not found!"
            MISSING=1
          else
            for pattern in "${REQUIRED_IGNORES[@]}"; do
              if ! grep -q "$pattern" .gitignore; then
                echo "⚠️  Missing in .gitignore: $pattern"
                MISSING=1
              fi
            done
          fi

          if [ $MISSING -eq 1 ]; then
            echo ""
            echo "🚨 .gitignore is incomplete!"
            echo "✅ Add the missing patterns to protect sensitive files"
            exit 1
          else
            echo "✅ .gitignore is properly configured"
          fi

  # Dependency vulnerability scanning - FREE!
  dependency-security:
    name: 🔍 Dependency Security (FREE)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run npm audit (FREE)
        run: |
          npm audit --audit-level=moderate || true
          npm audit fix --dry-run || true

      - name: Check for outdated packages
        run: |
          npm outdated || true

  # Verify Google Ads stays intact
  google-ads-check:
    name: 📊 Google Ads Integrity Check (FREE)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Google Ads code
        run: |
          echo "🔍 Checking Google Ads integration..."

          # Check if Google Ads code exists
          if grep -r "googletagmanager\|googlesyndication" . \
            --include="*.html" \
            --include="*.jsx" \
            --include="*.js" 2>/dev/null; then
            echo "✅ Google Ads code found and intact"
          else
            echo "⚠️  Warning: Google Ads code not found"
            echo "ℹ️  If you use Google Ads, make sure it's still in your HTML/JSX files"
          fi

          # Make sure we're not blocking ads accidentally
          if grep -r "adblock\|ad-block\|block-ads" . \
            --exclude-dir=node_modules \
            --exclude-dir=.git 2>/dev/null; then
            echo "⚠️  Warning: Found potential ad-blocking code"
          fi

  # Security summary for beginners
  security-summary:
    name: 📋 Security Summary (FREE)
    runs-on: ubuntu-latest
    needs: [secret-scanning, api-key-detection, sensitive-files-check, gitignore-check, dependency-security, google-ads-check]
    if: always()
    steps:
      - name: Generate security report
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `
            ## 🔒 Security Scan Results

            ### Checks Performed (All FREE!)

            | Security Check | Status |
            |---------------|--------|
            | 🔐 Secret Detection | ${{ needs.secret-scanning.result == 'success' && '✅ No secrets found' || '❌ SECRETS DETECTED!' }} |
            | 🔑 API Key Detection | ${{ needs.api-key-detection.result == 'success' && '✅ No API keys found' || '❌ API KEYS DETECTED!' }} |
            | 📁 Sensitive Files | ${{ needs.sensitive-files-check.result == 'success' && '✅ No sensitive files' || '❌ SENSITIVE FILES FOUND!' }} |
            | 📝 .gitignore Check | ${{ needs.gitignore-check.result == 'success' && '✅ Properly configured' || '⚠️ Needs update' }} |
            | 🔍 Dependencies | ${{ needs.dependency-security.result == 'success' && '✅ No vulnerabilities' || '⚠️ Check needed' }} |
            | 📊 Google Ads | ${{ needs.google-ads-check.result == 'success' && '✅ Intact' || '⚠️ Check needed' }} |

            ---

            ### 🆘 If You See Red X's (❌)

            **DON'T PANIC!** Here's what to do:

            1. **Read the error messages** above
            2. **Check SECURITY_FOR_BEGINNERS.md** in the repo
            3. **Remove any API keys** from your code
            4. **Add sensitive files** to .gitignore
            5. **Commit the fixes**

            ---

            ### ✅ Security Best Practices

            **Never commit these to GitHub:**
            - ❌ API keys (Anthropic, OpenAI, etc.)
            - ❌ Passwords
            - ❌ Private keys (.pem, .key files)
            - ❌ .env files
            - ❌ credentials.json

            **Always use:**
            - ✅ GitHub Secrets for API keys
            - ✅ .gitignore for sensitive files
            - ✅ Environment variables

            ---

            ### 🎓 New to GitHub?

            Read the **SECURITY_FOR_BEGINNERS.md** guide in this repo!

            It explains:
            - How to safely use API keys
            - What files to never commit
            - How to fix leaks if they happen
            - Common mistakes to avoid

            ---

            **🔒 All security scans are 100% FREE!**

            No API keys needed for security!
            `;

            core.summary.addRaw(summary);
            await core.summary.write();

            // Post comment on PR if there are issues
            if (context.eventName === 'pull_request') {
              const hasIssues =
                '${{ needs.secret-scanning.result }}' !== 'success' ||
                '${{ needs.api-key-detection.result }}' !== 'success' ||
                '${{ needs.sensitive-files-check.result }}' !== 'success';

              if (hasIssues) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `## 🚨 Security Issues Found!

**IMPORTANT:** This PR has security issues that need to be fixed before merging.

Check the "Security Scan Results" in the workflow run for details.

### Quick Fix Guide:

1. **Remove any API keys** from your code
2. **Add sensitive files** to .gitignore
3. **Use GitHub Secrets** for API keys instead
4. **Read SECURITY_FOR_BEGINNERS.md** for help

### Common mistakes:
- ❌ Committing .env files
- ❌ Hardcoding API keys in code
- ❌ Committing private keys

### How to fix:
\`\`\`bash
# Add to .gitignore
echo "*.env" >> .gitignore
echo "*.key" >> .gitignore
echo "credentials.json" >> .gitignore

# Remove from git (if already committed)
git rm --cached .env
git commit -m "Remove sensitive files"
\`\`\`

**Need help? Read SECURITY_FOR_BEGINNERS.md!**`
                });
              }
            }
