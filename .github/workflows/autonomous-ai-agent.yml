name: ü§ñ Autonomous AI Agent - Ultra Secured

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process (leave empty for all open PRs)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment after processing'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  deployments: write
  statuses: write

jobs:
  # Security scan first
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ai-agent
          npm install

      - name: Run security scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cd ai-agent
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            npm run cli scan ${{ github.event.pull_request.number }}
          fi

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}

  # AI Agent autonomous processing
  ai-agent-process:
    name: ü§ñ AI Agent Processing
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    outputs:
      approved: ${{ steps.process.outputs.approved }}
      build_success: ${{ steps.process.outputs.build_success }}
      test_success: ${{ steps.process.outputs.test_success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install AI Agent dependencies
        run: |
          cd ai-agent
          npm install

      - name: Install project dependencies
        run: npm ci

      - name: Process PR with AI Agent
        id: process
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
        run: |
          cd ai-agent

          # Determine PR number
          if [ -n "${{ github.event.inputs.pr_number }}" ]; then
            PR_NUM="${{ github.event.inputs.pr_number }}"
          elif [ -n "${{ github.event.pull_request.number }}" ]; then
            PR_NUM="${{ github.event.pull_request.number }}"
          else
            echo "No PR number provided, processing all open PRs"
            npm run cli process-all
            exit 0
          fi

          # Process the PR
          echo "Processing PR #$PR_NUM"
          npm run cli process $PR_NUM | tee output.txt

          # Extract results
          if grep -q "Approved: ‚úÖ Yes" output.txt; then
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "approved=false" >> $GITHUB_OUTPUT
          fi

          if grep -q "Build: ‚úÖ Passed" output.txt; then
            echo "build_success=true" >> $GITHUB_OUTPUT
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi

          if grep -q "Tests: ‚úÖ Passed" output.txt; then
            echo "test_success=true" >> $GITHUB_OUTPUT
          else
            echo "test_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload processing logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-agent-logs
          path: ai-agent/output.txt
          retention-days: 30

  # Code review with Claude
  ai-code-review:
    name: üìù AI Code Review
    runs-on: ubuntu-latest
    needs: [ai-agent-process]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ai-agent
          npm install

      - name: Perform code review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cd ai-agent
          npm run cli review ${{ github.event.pull_request.number }}

  # Build and test
  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    needs: [ai-agent-process]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Run tests
        run: npm test || echo "No tests configured"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: istani-rebuild/
          retention-days: 7

  # Deploy to Vercel (preview for PRs, production for main)
  deploy-vercel:
    name: üöÄ Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: |
      always() &&
      needs.build-and-test.result == 'success' &&
      (github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.event.inputs.force_deploy == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment
        run: |
          vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build
        run: npm run build

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            vercel --prod --token=${{ secrets.VERCEL_TOKEN }} | tee deploy-url.txt
          else
            vercel --token=${{ secrets.VERCEL_TOKEN }} | tee deploy-url.txt
          fi

          DEPLOY_URL=$(cat deploy-url.txt | tail -n 1)
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOY_URL"

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ **Vercel Deployment**\n\n‚úÖ Deployed to: ${{ steps.deploy.outputs.url }}\n\n*Deployed by ISTANI Autonomous AI Agent*'
            })

  # Deploy to Netlify
  deploy-netlify:
    name: üåê Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: |
      always() &&
      needs.build-and-test.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event.inputs.force_deploy == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=. --message="Deployed by ISTANI AI Agent"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Auto-merge if approved
  auto-merge:
    name: üîÄ Auto-merge
    runs-on: ubuntu-latest
    needs: [ai-agent-process, build-and-test, deploy-vercel]
    if: |
      always() &&
      github.event_name == 'pull_request' &&
      needs.ai-agent-process.outputs.approved == 'true' &&
      needs.build-and-test.result == 'success'
    steps:
      - name: Enable auto-merge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: 'squash',
              commit_title: '${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})',
              commit_message: 'Automatically merged by ISTANI Autonomous AI Agent\n\n‚úÖ AI Code Review: Approved\n‚úÖ Build: Success\n‚úÖ Tests: Passed\n‚úÖ Security Scan: Passed\n‚úÖ Deployment: Success'
            });

      - name: Post merge comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ **Auto-merged by ISTANI AI Agent**\n\nAll checks passed:\n- ‚úÖ Security scan\n- ‚úÖ AI code review\n- ‚úÖ Build\n- ‚úÖ Tests\n- ‚úÖ Deployment\n\nThis PR has been automatically merged to production.'
            })

  # Handle bot commands
  handle-commands:
    name: üéÆ Handle Bot Commands
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    steps:
      - name: Check for commands
        uses: actions/github-script@v7
        id: check
        with:
          result-encoding: string
          script: |
            const comment = context.payload.comment.body.toLowerCase().trim();
            if (comment === '/review') return 'review';
            if (comment === '/deploy') return 'deploy';
            if (comment === '/merge') return 'merge';
            if (comment === '/stats') return 'stats';
            return 'none';

      - name: Checkout code
        if: steps.check.outputs.result != 'none'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: steps.check.outputs.result != 'none'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Execute command
        if: steps.check.outputs.result != 'none'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          COMMAND: ${{ steps.check.outputs.result }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          cd ai-agent
          npm install

          case "$COMMAND" in
            review)
              npm run cli review $PR_NUMBER
              ;;
            deploy)
              npm run cli deploy
              ;;
            stats)
              npm run cli stats
              ;;
          esac

  # Notification and summary
  notify:
    name: üìä Summary & Notifications
    runs-on: ubuntu-latest
    needs: [ai-agent-process, build-and-test, deploy-vercel, deploy-netlify]
    if: always()
    steps:
      - name: Generate summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `
            ## ü§ñ ISTANI Autonomous AI Agent - Processing Summary

            **PR**: #${{ github.event.pull_request.number || github.event.inputs.pr_number }}
            **Event**: ${{ github.event_name }}
            **Timestamp**: ${new Date().toISOString()}

            ### Results

            | Check | Status |
            |-------|--------|
            | üîí Security Scan | ${{ needs.ai-agent-process.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
            | üìù AI Review | ${{ needs.ai-agent-process.outputs.approved == 'true' && '‚úÖ Approved' || '‚ö†Ô∏è Changes Requested' }} |
            | üèóÔ∏è Build | ${{ needs.build-and-test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |
            | üß™ Tests | ${{ needs.ai-agent-process.outputs.test_success == 'true' && '‚úÖ Passed' || '‚ö†Ô∏è Skipped' }} |
            | üöÄ Vercel Deploy | ${{ needs.deploy-vercel.result == 'success' && '‚úÖ Success' || needs.deploy-vercel.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |
            | üåê Netlify Deploy | ${{ needs.deploy-netlify.result == 'success' && '‚úÖ Success' || needs.deploy-netlify.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |

            ---
            *Powered by Claude AI & ISTANI Autonomous Agent*
            `;

            core.summary.addRaw(summary);
            await core.summary.write();
