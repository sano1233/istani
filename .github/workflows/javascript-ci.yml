name: 🧪 JavaScript CI - Quality & Security

# JavaScript/React equivalent of Python CI toolchain
# Comprehensive quality, security, and testing pipeline

on:
  push:
    branches: [main, 'claude/**']
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: read
  checks: write
  security-events: write

jobs:
  quality-checks:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      - name: ESLint (JavaScript equivalent of Ruff)
        run: |
          npx eslint . --ext .js,.jsx,.mjs,.ts,.tsx --max-warnings 0 || true

      - name: Prettier format check (JavaScript equivalent of Black)
        run: |
          npx prettier --check "**/*.{js,jsx,mjs,ts,tsx,json,css,md,html}" || {
            echo "❌ Formatting issues found. Run: npm run format"
            exit 1
          }

      - name: Type checking (JavaScript equivalent of Mypy)
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit || echo "⚠️ Type errors found"
          else
            echo "ℹ️ No TypeScript config, skipping type check"
          fi

  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: npm audit (JavaScript equivalent of Safety)
        run: |
          npm audit --audit-level=moderate || {
            echo "⚠️ Security vulnerabilities found"
            npm audit --json > npm-audit.json || true
          }

      - name: Gitleaks secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ESLint security rules (JavaScript equivalent of Bandit)
        run: |
          npm install --no-save eslint-plugin-security
          npx eslint . --ext .js,.jsx,.mjs --plugin security --rule 'security/detect-eval-with-expression:error' || true

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'table'
          severity: 'CRITICAL,HIGH'

  test-and-coverage:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run tests (JavaScript equivalent of Pytest)
        run: |
          npm test -- --passWithNoTests --coverage || {
            echo "⚠️ Tests not configured or failed"
          }

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build project
        run: |
          npm run build

          # Verify build output
          if [ -d "istani-rebuild" ]; then
            echo "✅ Build output verified"
            ls -lh istani-rebuild/
          else
            echo "❌ Build output missing"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: istani-rebuild/
          retention-days: 7

  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  ci-summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, test-and-coverage, build-verification]
    if: always()
    steps:
      - name: Generate CI summary
        run: |
          echo "## 🧪 JavaScript CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.quality-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests & Coverage | ${{ needs.test-and-coverage.result == 'success' && '✅ Passed' || '⚠️ Check' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**JavaScript toolchain equivalent to Python:**" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint (Ruff)" >> $GITHUB_STEP_SUMMARY
          echo "- Prettier (Black)" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript (Mypy)" >> $GITHUB_STEP_SUMMARY
          echo "- npm audit (Safety)" >> $GITHUB_STEP_SUMMARY
          echo "- Gitleaks (Gitleaks)" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy (Trivy)" >> $GITHUB_STEP_SUMMARY
